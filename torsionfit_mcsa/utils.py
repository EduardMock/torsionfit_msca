from copy import deepcopy
import numpy as np
import ipywidgets 
from ipywidgets import Layout, ButtonStyle,Output
from IPython.display import clear_output
import os 
from geometric.molecule import Molecule
import nglview
from geometric.molecule import Molecule


def read_scan_xyz(filename):
    """
    Parse the scan xyz file into a dictionary
    Parameters
    ----------
    filename: str
        path to the scan.xyz file generated by torsiondrive
    Returns
    -------
    grid_data: dict
        A dictionary of {grid_id: energy} """
    grid_data = {}
    m = Molecule(filename)
    for line in m.comms:
        # parse comment line, find grid id between "(" and ")"
        try:
            left_p_idx = line.index('(')
            right_p_idx = line.index(')')
        except ValueError:
            print("Grid id in (XX, XX) format not found in file")
            raise
        grid_id_str = line[left_p_idx+1: right_p_idx]
        grid_id = tuple(int(s) for s in grid_id_str.split(',') if s)
        # read the last element as energy
        ls = line.rsplit(maxsplit=1)
        energy = float(ls[-1])
        grid_data[grid_id] = energy
    return grid_data





class MyStructureTrajectory(nglview.Structure, nglview.Trajectory):
    """ 
    Custom nglview.Structure and nglview.Trajectory subclass
    For loading molecule files using geomeTRIC.molecule.Molecule

    Reference
    ---------
    http://nglviewer.org/nglview/latest/interface_classes.html
    """
    ext = "pdb"  # or gro, cif, mol2, sdf
    params = {}  # loading options passed to NGL
    id = '123121'
    
    def __init__(self, mol_input_file, *args, **kwargs):
        mol = mol_input_file
        # fill in required fields for PDB format
        #if not mol.Data.get('resname'):
            #mol.Data['atomname'] = atomnames_p222h
        if not mol.Data.get('resname'):
            mol.Data['resname'] = ['RES'] * mol.na
        if not mol.Data.get('resid'):
            mol.Data['resid'] = [1] * mol.na
        self.mol = mol
    
    
    def get_structure_string(self):
        return '\n'.join(self.mol.write_pdb(None))

    def get_structure_string_xyz(self,frm):
        return '\n'.join(self.mol.write_xyz([frm]))
    
    def get_structure_string_gro(self):
        return '\n'.join(self.mol.write_gro(None))
    
    def get_coordinates(self, index):
        # return 2D numpy array, shape=(n_atoms, 3)
        return self.mol.xyzs[index]
    
    @property
    def n_frames(self):
        # return total frames
        return len(self.mol)
    




def show_torsion(mol_init,d_num,d_name,torsion_path=None):

    mol= deepcopy(mol_init)
    m_all, goAtoms =mol.rotate_bond(0,*d_num[1:3],increment=10)
    m_rot=m_all[::]
    molview = nglview.NGLWidget(MyStructureTrajectory(m_rot)) 
    molview._set_size('600px', '500px')
    # molview.add_distance(atom_pair=[["1.C3", "1.H2"]], label_color="black")
    molview._add_shape( [('sphere', m_rot.xyzs[0][d],[0,15,158], 0.5) for d in d_num ],  name='dihed')
    out = Output()
    
    def on_value_change(b):
        with out: 
            frm=b['new']
            molview.remove_component(molview._ngl_component_ids[-1])   
            molview._add_shape( [('sphere', m_rot.xyzs[frm][d],[0,15,158], 0.5) for d in d_num ],  name='dihed')
                

    molview.observe(on_value_change, ['frame']) 
    
    text = ipywidgets.Button(description= "%s"%d_name,
                 layout=Layout(width='600px', grid_area='header'),
                 style=ButtonStyle(button_color='lightblue',font_size="35",font_weight='bold'))
    ipy_widg =ipywidgets.VBox([text,molview])

    if torsion_path is not None:
        
        rot_by=m_rot.measure_dihedrals(*d_num)
        
        for c,i in enumerate(m_rot):
            rot_int=int(np.round(rot_by[c],1))
            opt_path="%s/%s/opt_tmp/gid_%i"%(torsion_path,d_name,rot_int)
            
            if not os.path.exists(opt_path):
                os.makedirs(opt_path)
            
                
            f=open("%s/molecule.xyz"%(opt_path), "w")
            print(MyStructureTrajectory(m_rot).get_structure_string_xyz(c), file=f)
            f.close()
            
            dihed=open("%s/dihedrals.txt"%(opt_path), "w")
            print(
            f"""# dihedral definition by atom indices starting from 1
# i   j   k   l
  {d_num[0]+1}   {d_num[1]+1}   {d_num[2]+1}   {d_num[3]+1}      
            
            """,file=dihed)
            
            
            bash=open("%s/torsion.sh"%(opt_path), "w")
            print(f"""#!/bin/bash

##SBATCH --job-name=${d_name}_${rot_int}
#SBATCH --time=24:00:00
#SBATCH --contiguous
#SBATCH -e scan.err
#SBATCH -o scan.log 

#SBATCH --account=itmz
#SBATCH --partition=compute
##SBATCH --reservation=dp205_16
##SBATCH --ntasks-per-node=20

source /data/em208/miniconda3/bin/activate qm
python psi4_dihedral_scan.py molecule.xyz 1 1 
            """,file=bash)
            
            # chrg=-1

            bash_chk=open("%s/torsion.sh"%(opt_path), "w")
            print(r"""#!/bin/bash
##SBATCH --job-name=torsionscan
#SBATCH --time=24:00:00
#SBATCH -e scan.err
#SBATCH -o scan.log

#SBATCH --account=itmz
#SBATCH --partition=compute
#SBATCH --nodes=1

#SBATCH --signal=B:USR1@60
#SBATCH --open-mode=append
 
rootdir=`pwd`
scratchdir=/scratch/${USER}.${SLURM_JOB_ID}
mkdir $scratchdir && cd $scratchdir
cp $rootdir/* .
 
source /data/em208/miniconda3/bin/activate qm
export PSI_SCRATCH=$scratchdir
python psi4_dihedral_scan.py molecule.xyz 1 1  #corr charge multi

[ -f geoms.xyz ] && cp geoms.xyz $rootdir
[ -f xyz.rst ] && cp xyz.rst $rootdir

rm -rf $scratchdir
                                         
            """,file=bash_chk)


            psi4qm=open("%s/psi4_dihedral_scan.py"%(opt_path), "w")
            print(
r"""#!/bin/env python
import os, sys
import psi4
import numpy as np
import nglview
from geometric.molecule import Molecule


class MyStructureTrajectory(nglview.Structure, nglview.Trajectory):
    def __init__(self, mol_input_file, *args, **kwargs):
        mol = mol_input_file
        self.mol = mol
    def get_structure_string_xyz(self):
        return '\n'.join(self.mol.write_xyz([0]))


xyz_file=sys.argv[1]
charge=int(sys.argv[2])
multi=int(sys.argv[3])
dihedralnum=np.loadtxt("dihedrals.txt", skiprows=2, dtype=int )

psi_hartree2kcalmol=627.5095


with open(xyz_file) as j:
    xyz_o = j.read()

mol =psi4.core.Molecule.from_string(xyz_o, dtype='xyz')
mol.set_molecular_charge(charge)
mol.set_multiplicity(multi)
mol.update_geometry()
frozen_dihedral = F'{*dihedralnum,}'

# psi4.set_memory('8GB')
psi4.set_options(
{ "frozen_dihedral": frozen_dihedral ,
  'geom_maxiter': 200,
#   'optking__opt_coordinates': "cartesian",
  'optking__print_trajectory_xyz_file': True,
  })

try:
    SCF_energy, SCF_wfn = psi4.optimize('b3lyp/6-31G*', molecule= mol ,return_wfn=True)   # geometry optimization with B3lyp	
    MP2_energy = psi4.energy('mp2/cc-pvtz', molecule= mol)  # calculate single point energy with MP
    f=open("result.dat", "w")
    print("MP2_Energy(kcal/mol)= %.4f" % (MP2_energy * psi_hartree2kcalmol), file=f )
    f.close()

except psi4.ConvergenceError: 
    r=open("xyz.rst","w") 
    m=Molecule("geoms.xyz")
    xyz_out = MyStructureTrajectory(m[-1]).get_structure_string_xyz()
    print("%s"%xyz_out,file=r)
    r.close()
    
""",file=psi4qm)


    return ipy_widg




verbose = False

def RMSE(scanSet, db):
    '''

    :param model: TorsionScanSet
    :param db: pymc database
    :return: numpy array of rmse
    '''

    N = len(scanSet.qm_energy)
    errors = np.zeros(len(db.trace('mm_energy')[:]))
    for i, energy in enumerate(db.trace('mm_energy')[:]):
        rmse = np.linalg.norm(energy - scanSet.qm_energy)/np.sqrt(N)
        errors[i] = rmse
    return errors

