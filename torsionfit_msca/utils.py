__author__ = 'Chaya D. Stern'

import numpy as np
import logging
import sys


import math
from geometric.molecule import Molecule

def read_scan_xyz(filename):
    """
    Parse the scan xyz file into a dictionary
    Parameters
    ----------
    filename: str
        path to the scan.xyz file generated by torsiondrive
    Returns
    -------
    grid_data: dict
        A dictionary of {grid_id: energy} """
    grid_data = {}
    m = Molecule(filename)
    for line in m.comms:
        # parse comment line, find grid id between "(" and ")"
        try:
            left_p_idx = line.index('(')
            right_p_idx = line.index(')')
        except ValueError:
            print("Grid id in (XX, XX) format not found in file")
            raise
        grid_id_str = line[left_p_idx+1: right_p_idx]
        grid_id = tuple(int(s) for s in grid_id_str.split(',') if s)
        # read the last element as energy
        ls = line.rsplit(maxsplit=1)
        energy = float(ls[-1])
        grid_data[grid_id] = energy
    return grid_data




import nglview
from geometric.molecule import Molecule


class MyStructureTrajectory(nglview.Structure, nglview.Trajectory):
    """ 
    Custom nglview.Structure and nglview.Trajectory subclass
    For loading molecule files using geomeTRIC.molecule.Molecule

    Reference
    ---------
    http://nglviewer.org/nglview/latest/interface_classes.html
    """
    ext = "pdb"  # or gro, cif, mol2, sdf
    params = {}  # loading options passed to NGL
    id = '123121'
    
    def __init__(self, mol_input_file, *args, **kwargs):
        mol = mol_input_file
        # fill in required fields for PDB format
        #if not mol.Data.get('resname'):
            #mol.Data['atomname'] = atomnames_p222h
        if not mol.Data.get('resname'):
            mol.Data['resname'] = ['RES'] * mol.na
        if not mol.Data.get('resid'):
            mol.Data['resid'] = [1] * mol.na
        self.mol = mol
    
    
    def get_structure_string(self):
        return '\n'.join(self.mol.write_pdb(None))

    def get_structure_string_xyz(self,frm):
        return '\n'.join(self.mol.write_xyz([frm]))
    
    def get_structure_string_gro(self):
        return '\n'.join(self.mol.write_gro(None))
    
    def get_coordinates(self, index):
        # return 2D numpy array, shape=(n_atoms, 3)
        return self.mol.xyzs[index]
    
    @property
    def n_frames(self):
        # return total frames
        return len(self.mol)
    



verbose = False

def RMSE(scanSet, db):
    '''

    :param model: TorsionScanSet
    :param db: pymc database
    :return: numpy array of rmse
    '''

    N = len(scanSet.qm_energy)
    errors = np.zeros(len(db.trace('mm_energy')[:]))
    for i, energy in enumerate(db.trace('mm_energy')[:]):
        rmse = np.linalg.norm(energy - scanSet.qm_energy)/np.sqrt(N)
        errors[i] = rmse
    return errors


def logger(name='torsionFit', pattern='%(asctime)s %(levelname)s %(name)s: %(message)s',
           date_format='%H:%M:%S', handler=logging.StreamHandler(sys.stdout)):
    """
    Retrieves the logger instance associated to the given name
    :param name: The name of the logger instance
    :param pattern: The associated pattern
    :param date_format: The date format to be used in the pattern
    :param handler: The logging handler
    :return: The logger
    """
    _logger = logging.getLogger(name)
    _logger.setLevel(log_level(verbose))

    if not _logger.handlers:
        formatter = logging.Formatter(pattern, date_format)
        handler.setFormatter(formatter)
        handler.setLevel(log_level(verbose))
        _logger.addHandler(handler)
        _logger.propagate = False
    return _logger


def log_level(verbose=verbose):
    if verbose:
        return logging.DEBUG
    else:
        return logging.INFO
